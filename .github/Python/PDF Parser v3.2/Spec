# PDF Parser and Analyzer v3.1 - Developed by Owen Riddle. A dark-themed Python tool for extracting, analyzing, and exporting PDF content using custom regex patterns. https://www.linkedin.com/in/owen-riddle-aa3501124/

import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import pdfplumber
import pandas as pd
import re
import csv
import os
import json
import sys

class PDFParserApp:
    def __init__(self, root):
        """Initialize the main application window and display welcome message"""
        self.root = root
        self.root.title("PDF Parser and Analyzer v3.1")
        self.root.configure(bg="#2C2F33")

        self.pages_to_extract = [0]  # Default page selection
        self.saved_patterns = self.load_saved_patterns()  # Load regex patterns on startup
        self.file_text_mapping = []
        self.match_results = []

        # Create main frame (must be defined before the sidebar)
        self.frame = tk.Frame(self.root, bg="#2C2F33")
        self.frame.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

        # Sidebar visibility flag
        self.sidebar_visible = False  

        # Sidebar frame (must be initialized after `self.frame`)
        self.regex_manager_frame = tk.Frame(self.frame, bg="#1E1E1E", width=250, relief="raised", bd=2)
        self.regex_manager_frame.grid(row=0, column=2, sticky="ns")
        self.regex_manager_frame.grid_remove()  # Hides the sidebar initially

        # Create UI elements
        self.create_regex_manager_ui()
        self.style_buttons()
        self.create_widgets()
        self.welcome_message()

        # Create the status bar at the bottom
        self.create_status_bar()

    def welcome_message(self):
        """Welcome message upon opening app"""
        self.extracted_text_area.insert(1.0, 'Welcome to the app! PDF Parser is still in development, reach out to Owen for more information')

    def style_buttons(self):
        """Configures custom styles for buttons with hover effects."""
        style = ttk.Style()

        style.theme_use("alt")

        # Base button styling
        style.configure("TButton",
                        padding=5,
                        relief="flat",
                        font=("Helvetica", 8, "bold"),
                        width=15,
                        background="#90EE90")  # Normal state color (some themes ignore this)

        # Apply hover effect via map
        style.map("TButton",
                    background=[("active", "#20B2AA")],  # Lighter green on hover
                    foreground=[("active", "white")])

    def create_widgets(self):
        """Creates all the UI elements and configures grid weights for resizing."""
        # Title Label
        app_title_label = tk.Label(self.root, text="PDF Parser and Analyzer", font=("Helvetica", 16), bg="#2C2F33", fg="white")
        app_title_label.grid(row=0, column=0, columnspan=3, pady=10)  # Expand across 3 columns

        # Ensure the app layout expands when resized
        self.root.grid_rowconfigure(1, weight=1)  # Allow row to expand
        self.root.grid_columnconfigure(0, weight=1)  # Allow column to expand

        # Left Panel (Buttons)
        self.left_panel = tk.Frame(self.frame, bg="#2C2F33")
        self.left_panel.grid(row=0, column=0, sticky="ns", padx=5)

        # Right Panel (Text Area)
        self.right_panel = tk.Frame(self.frame, bg="#2C2F33")
        self.right_panel.grid(row=0, column=1, padx=5, sticky="nsew")

        # Configure grid weights so the text area expands
        self.frame.grid_rowconfigure(0, weight=1)
        self.frame.grid_columnconfigure(0, weight=0)  # Left panel (buttons) stays fixed
        self.frame.grid_columnconfigure(1, weight=3)  # Right panel (text area) expands
        self.frame.grid_columnconfigure(2, weight=0)  # Sidebar

        self.right_panel.grid_rowconfigure(0, weight=1)  # Allow text area to expand
        self.right_panel.grid_columnconfigure(0, weight=1)  # Expand horizontally

        # Create buttons and text area
        self.create_buttons()
        self.create_text_area()
    
    def create_buttons(self):
        """Creates buttons in the left panel."""
        settings_button = ttk.Button(self.left_panel, text="Settings", command=self.open_settings_window)
        settings_button.grid(row=0, column=0, pady=5)

        upload_button = ttk.Button(self.left_panel, text="Upload PDFs", command=self.upload_pdfs)
        upload_button.grid(row=1, column=0, pady=5)

        clear_button = ttk.Button(self.left_panel, text="Clear Terminal", command=self.clear_extracted_text)
        clear_button.grid(row=2, column=0, pady=5)

        regex_manager_button = ttk.Button(self.left_panel, text="Manage Regex", command=self.toggle_regex_manager)
        regex_manager_button.grid(row=3, column=0, pady=5)

        regex_help_button = ttk.Button(self.left_panel, text="Regex Help", command=self.show_regex_help_window)
        regex_help_button.grid(row=4, column=0, pady=5)

    def create_text_area(self):
        """Creates the text area with a modern scrollbar and progress bar without affecting buttons."""
        text_frame = tk.Frame(self.right_panel, bg="#2C2F33")  # Wrapper frame for text, scrollbar, and progress bar
        text_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)

        # Progress Bar at top of text area
        self.progress_bar = ttk.Progressbar(text_frame, orient="horizontal", mode="determinate")
        self.progress_bar.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(5, 0))  # Added padding to separate it

        # Custom scrollbar
        scrollbar_style = ttk.Style()

        scrollbar_style.configure("Modern.Vertical.TScrollbar",
                                gripcount=0,
                                background="#3A3F44",  # Dark grey scrollbar
                                troughcolor="#1E1E1E",  # Match text area
                                bordercolor="#3A3F44",
                                arrowcolor="white",
                                relief="flat",
                                width=12)  # Adjust scrollbar width for a sleeker look

        scrollbar_style.map("Modern.Vertical.TScrollbar",
                                background=[("active", "#4A90E2")],  # Light blue hover effect
                                troughcolor=[("active", "#1E1E1E")])

        # Create the vertical scrollbar with modern styling
        self.text_scrollbar = ttk.Scrollbar(text_frame, orient="vertical", style="Modern.Vertical.TScrollbar")

        # Create the text area
        self.extracted_text_area = tk.Text(
            text_frame, wrap="word", width=100, height=28,
            bg="#1E1E1E", fg="#D4D4D4", font=("Helvetica", 10),
            insertbackground="white",  # Cursor visibility
            relief="flat",  # Sleek look
            yscrollcommand=self.text_scrollbar.set
        )

        # Configure scrollbar to control the text area
        self.text_scrollbar.config(command=self.extracted_text_area.yview)

        # Pack text area and scrollbar
        self.extracted_text_area.grid(row=1, column=0, sticky="nsew")
        self.text_scrollbar.grid(row=1, column=1, sticky="ns")

        # Hide the progress bar initially
        self.progress_bar.grid_remove()

        # Ensure text frame expands properly
        text_frame.grid_rowconfigure(1, weight=1)  # Text area expands
        text_frame.grid_columnconfigure(0, weight=1)  # Expand horizontally
    
    def create_status_bar(self):
        """Creates the status bar at the bottom of the main window."""
        self.status_var = tk.StringVar()
        self.status_var.set("Ready") # Default message
        self.status_bar = tk.Label(self.root, textvariable=self.status_var, bd=1, relief=tk.SUNKEN, anchor=tk.W, bg="#2C2F33", fg="white")
        # Place the status bar at the bottom of the window
        self.status_bar.grid(row=2, column=0, columnspan=3, sticky="ew")

    def update_status(self, message):
        """Updates the text displayed in the status bar."""
        self.status_var.set(message)
        # Force UI to update
        self.status_bar.update_idletasks()

    def open_settings_window(self):
        """Opens a settings window for selecting pages to extract."""
        print("Settings window function triggered")  # Debugging line
        settings_window = tk.Toplevel(self.root)
        settings_window.title("Settings")
        settings_window.geometry("400x200")
        settings_window.configure(bg="#2C2F33")  # Same background as the main window

        # Create a container frame with padding
        container = tk.Frame(settings_window, bg="#2C2F33")
        container.pack(fill="both", expand=True, padx=20, pady=20)

        # Label with consistent styling
        label = tk.Label(
            container,
            text="Pages to extract (comma-separated):",
            bg="#2C2F33",
            fg="white",
            font=("Helvetica", 10)
        )
        label.grid(row=0, column=0, columnspan=2, pady=(0, 10), sticky="w")

        # Use ttk.Entry for consistency with other input fields
        self.pages_entry = ttk.Entry(container, width=30)
        self.pages_entry.insert(0, ','.join(map(str, self.pages_to_extract)))
        self.pages_entry.grid(row=1, column=0, columnspan=2, pady=(0, 10), sticky="w")

        # Save Button using ttk for consistent styling
        save_button = ttk.Button(container, text="Save", command=self.save_settings)
        save_button.grid(row=2, column=0, pady=(0, 10), sticky="e", padx=(0, 10))

        # Error Message Label styled to match the background and font
        self.error_label = tk.Label(
            container,
            text="",
            fg="red",
            bg="#2C2F33",
            font=("Helvetica", 9)
        )
        self.error_label.grid(row=2, column=1, pady=(0, 10), sticky="w")

    def save_settings(self):
        """Saves the selected pages for extraction and closes the settings window."""
        try:
            self.pages_to_extract = list(map(int, self.pages_entry.get().split(',')))
            print(f"Updated pages to extract: {self.pages_to_extract}")
            
            # Show a success message
            messagebox.showinfo("Success", "Settings saved successfully!")
            self.update_status("Settings saved.")

        except ValueError:
            messagebox.showerror("Error", "Invalid input! Please enter numbers separated by commas.")

    def create_regex_manager_ui(self):
        """Creates the UI components inside the Regex Manager sidebar with a consistent dark theme."""
        scrollbar_style = ttk.Style()
        scrollbar_style.configure("Modern.Vertical.TScrollbar",
                                gripcount=0,
                                background="#3A3F44",   # Dark grey scrollbar
                                troughcolor="#1E1E1E",    # Matches dark background
                                bordercolor="#3A3F44",
                                arrowcolor="white",
                                relief="flat",
                                width=12)
        scrollbar_style.map("Modern.Vertical.TScrollbar",
                            background=[("active", "#4A90E2")],
                            troughcolor=[("active", "#1E1E1E")])
        
        # Title Label
        title_label = tk.Label(
            self.regex_manager_frame,
            text="Regex Manager",
            fg="white",
            bg="#1E1E1E",
            font=("Helvetica", 12, "bold")
        )
        title_label.pack(pady=(20, 10))

        # Instruction Label
        instruction_label = tk.Label(
            self.regex_manager_frame,
            text="Enter a new regex pattern or select from saved patterns",
            fg="white",
            bg="#1E1E1E",
            font=("Helvetica", 10),
            wraplength=230
        )
        instruction_label.pack(pady=(5, 5))

        # Input field for entering the regex name using tk.Entry for full color control.
        self.regex_name_entry = tk.Entry(
            self.regex_manager_frame,
            width=45,
            bg="#2C2C2C",
            fg="#D4D4D4",
            insertbackground="white",  # Cursor color
            font=("Helvetica", 10),
            relief="flat"
        )
        self.regex_name_entry.pack(pady=5, padx=5)
        self.regex_name_entry.insert(0, "Enter New Pattern Name")  # Placeholder text

        # Input field for entering new regex patterns using tk.Entry.
        self.regex_entry = tk.Entry(
            self.regex_manager_frame,
            width=45,
            bg="#2C2C2C",
            fg="#D4D4D4",
            insertbackground="white",
            font=("Helvetica", 10),
            relief="flat"
        )
        self.regex_entry.pack(pady=5, padx=5)
        self.regex_entry.insert(0, "Enter New Pattern")  # Placeholder text

        # Saved Patterns Label
        saved_label = tk.Label(
            self.regex_manager_frame,
            text="Saved Patterns:",
            fg="white",
            bg="#1E1E1E",
            font=("Helvetica", 10),
            wraplength=230
        )
        saved_label.pack(pady=(5, 5))

        # Create a frame to hold the listbox and its custom scrollbar.
        listbox_frame = tk.Frame(self.regex_manager_frame, bg="#1E1E1E")
        listbox_frame.pack(pady=5, padx=5, fill="both", expand=True)

        # Multi-selection listbox for saved patterns with dark-themed settings.
        self.pattern_listbox = tk.Listbox(
            listbox_frame,
            selectmode=tk.MULTIPLE,
            height=15,
            width=45,
            bg="#252525",
            fg="#D4D4D4",
            font=("Helvetica", 10),
            relief="flat",
            highlightthickness=0
        )
        # Create a vertical scrollbar for the listbox using the custom style.
        listbox_scrollbar = ttk.Scrollbar(
            listbox_frame,
            orient="vertical",
            style="Modern.Vertical.TScrollbar",
            command=self.pattern_listbox.yview
        )
        self.pattern_listbox.configure(yscrollcommand=listbox_scrollbar.set)

        # Layout the listbox and scrollbar side by side using grid.
        self.pattern_listbox.grid(row=0, column=0, sticky="nsew")
        listbox_scrollbar.grid(row=0, column=1, sticky="ns")
        listbox_frame.grid_rowconfigure(0, weight=1)
        listbox_frame.grid_columnconfigure(0, weight=1)

        # Populate the listbox with saved patterns.
        for entry in self.saved_patterns:
            if isinstance(entry, dict):
                display_text = f"{entry.get('name', 'NoName')}: {entry.get('pattern', '')}"
            else:
                display_text = str(entry)
            self.pattern_listbox.insert(tk.END, display_text)

        # Frame for buttons.
        button_frame = tk.Frame(self.regex_manager_frame, bg="#1E1E1E")
        button_frame.pack(pady=5)

        # Analyze Button (applies multiple patterns)
        test_button = ttk.Button(
            button_frame,
            text="Analyze Data",
            command=self.analyze_selected_patterns,
            width=15
        )
        test_button.grid(row=0, column=0, padx=5, pady=3)

        # Save Pattern Button
        save_button = ttk.Button(
            button_frame,
            text="Save Pattern",
            command=self.save_regex_pattern,
            width=15
        )
        save_button.grid(row=1, column=0, padx=5, pady=5)

        # Delete Pattern Button
        delete_button = ttk.Button(
            button_frame,
            text="Delete Pattern",
            command=self.delete_selected_pattern,
            width=15
        )
        delete_button.grid(row=1, column=1, padx=5, pady=5)

        # Export to CSV Button
        export_button = ttk.Button(
            button_frame,
            text="Export Data",
            command=self.export_results_to_csv,
            width=15
        )
        export_button.grid(row=0, column=1, padx=5, pady=3)

    def toggle_regex_manager(self):
        """Toggles the visibility of the Regex Manager sidebar."""
        if self.sidebar_visible:
            self.regex_manager_frame.grid_remove()  # Hide sidebar
        else:
            self.regex_manager_frame.grid(row=0, column=2, sticky="nsw", pady=(5,5))
        self.sidebar_visible = not self.sidebar_visible

    def extract_text(self, pdf_filepath):
        """Extracts text from the selected PDF file."""
        try:
            with pdfplumber.open(pdf_filepath) as pdf:
                text = ""
                for page_num in self.pages_to_extract:
                    if page_num < len(pdf.pages):
                        page = pdf.pages[page_num]
                        text += f"\n<------------- Page: {page_num + 1}, -------------> \n" + page.extract_text()
                    else:
                        text += f"\n[WARNING] Page {page_num + 1} not found in {pdf_filepath}.\n"
                return text if text else "No text found to extract."
        except Exception as error:
            return f"Error reading {pdf_filepath}: {error}"

    def upload_pdfs(self):
        """Handles PDF selection and extraction with progress bar updates."""
        pdf_filepaths = filedialog.askopenfilenames(
            title="Select PDF Files",
            filetypes=[("PDF Files", "*.pdf"), ("All Files", "*.*")]
        )

        if not pdf_filepaths:
            print("No files selected.")  
            return  # Exit early if no files are selected

        print("Files uploaded")

        all_extracted_text = ""  # Reset text area contents
        self.progress_bar.grid(row=0, column=0, sticky="ew", pady=5)
        self.progress_bar["value"] = 0  # Reset progress
        self.extracted_text_area.update()

        num_files = len(pdf_filepaths)
        progress_step = 100 / num_files if num_files > 0 else 0  # Prevent division by zero

        # Clear previous results
        self.match_results = []
        self.file_text_mapping = []  # Store filename-to-text mapping

        for index, pdf_filepath in enumerate(pdf_filepaths):
            filename = os.path.basename(pdf_filepath)  # Store the filename per file
            extracted_text = self.extract_text(pdf_filepath)
            
            # Append the extracted text per file
            all_extracted_text += f"\n=== File: {filename} ===\n" + extracted_text + "\n"

            # Store extracted text per file for later analysis
            self.file_text_mapping.append({
                "Filename": filename,
                "Extracted Text": extracted_text
            })

            # Update progress bar
            self.progress_bar["value"] += progress_step
            self.root.update_idletasks()  # Forces the UI to refresh

        self.progress_bar.grid_remove()  # Hide progress bar when done

        # Insert extracted text into the text area
        self.extracted_text_area.delete(1.0, tk.END)
        self.extracted_text_area.insert(tk.END, all_extracted_text)

        self.update_status("Files uploaded and processed.")

    def clear_extracted_text(self):
        """Clears the text area and resets internal analysis data."""
        # Clear the text area
        self.extracted_text_area.delete(1.0, tk.END)
        
        # Reset internal data structures
        self.match_results = []
        self.file_text_mapping = []

        # Update status bar
        self.update_status("Cleared terminal and reset internal app data.")

    def show_regex_help_window(self):
        """Opens a separate window displaying detailed regex help and examples."""
        help_text = (
            "Regex Help:\n"
            "----------------------------\n"
            "1. Basic Syntax:\n"
            "   .       : Matches any single character except a newline.\n"
            "   ^       : Asserts the start of the string.\n"
            "   $       : Asserts the end of the string.\n"
            "   *       : Matches 0 or more repetitions of the preceding pattern.\n"
            "   +       : Matches 1 or more repetitions of the preceding pattern.\n"
            "   ?       : Matches 0 or 1 repetition; also used for non-greedy quantifiers.\n"
            "\n"
            "2. Quantifiers:\n"
            "   {n}     : Matches exactly n occurrences of the preceding pattern.\n"
            "   {n,}    : Matches n or more occurrences of the preceding pattern.\n"
            "   {n,m}   : Matches between n and m occurrences of the preceding pattern.\n"
            "\n"
            "3. Character Classes:\n"
            "   [abc]   : Matches any one of the characters a, b, or c.\n"
            "   [^abc]  : Matches any character except a, b, or c.\n"
            "   [a-z]   : Matches any lowercase letter from a to z.\n"
            "   \\d      : Matches any digit (equivalent to [0-9]).\n"
            "   \\D      : Matches any non-digit character.\n"
            "   \\w      : Matches any word character (letters, digits, underscore).\n"
            "   \\W      : Matches any non-word character.\n"
            "   \\s      : Matches any whitespace (space, tab, newline).\n"
            "   \\S      : Matches any non-whitespace character.\n"
            "\n"
            "4. Grouping and Alternation:\n"
            "   ()      : Groups patterns together and captures the matched subexpression.\n"
            "   (?:)    : Groups patterns without capturing (non-capturing group).\n"
            "   |       : Acts as an OR operator between expressions.\n"
            "\n"
            "5. Escaping Special Characters:\n"
            "   \\       : Escapes a special character so it can be matched literally.\n"
            "\n"
            "6. Lookahead and Lookbehind Assertions:\n"
            "   (?=...)  : Positive lookahead; matches a group after the main expression without including it in the result.\n"
            "   (?!...)  : Negative lookahead; ensures that a group does NOT follow the main expression.\n"
            "   (?<=...) : Positive lookbehind; matches a group preceding the main expression without including it.\n"
            "   (?<!...) : Negative lookbehind; ensures that a group does NOT precede the main expression.\n"
            "\n"
            "----------------------------\n"
            "Examples:\n"
            "   Example 1: Validate a Social Security Number\n"
            "     Pattern: '^\\d{3}-\\d{2}-\\d{4}$'\n"
            "     Explanation: Matches exactly 3 digits, a dash, 2 digits, another dash, and 4 digits.\n"
            "\n"
            "   Example 2: Extract an Email Address\n"
            "     Pattern: '(\\w+)@(\\w+\\.\\w+)'\n"
            "     Explanation: Captures an email address with a simple structure: username@domain.extension.\n"
            "\n"
            "   Example 3: Find all words that start with a capital letter\n"
            "     Pattern: '\\b[A-Z][a-z]*\\b'\n"
            "     Explanation: Matches words beginning with an uppercase letter followed by zero or more lowercase letters.\n"
            "\n"
            "----------------------------\n"
            "For more detailed explanations and examples, refer to the Python 're' module documentation:\n"
            "https://docs.python.org/3/library/re.html\n"
        )

        # Create a new Toplevel window for the help content
        help_window = tk.Toplevel(self.root)
        help_window.title("Regex Help")
        help_window.geometry("600x500")  # Default window size
        help_window.configure(bg="#2C2F33")

        # Create a frame to hold the text widget and scrollbar
        text_frame = tk.Frame(help_window, bg="#2C2F33")
        text_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # Create the Text widget to display the help text
        help_text_widget = tk.Text(
            text_frame, wrap="word",
            bg="#1E1E1E", fg="#D4D4D4", font=("Helvetica", 10)
        )
        help_text_widget.insert(tk.END, help_text)
        help_text_widget.configure(state=tk.DISABLED)  # Make it read-only

        # Create a vertical scrollbar linked to the text widget
        scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=help_text_widget.yview)
        help_text_widget.configure(yscrollcommand=scrollbar.set)

        # Layout the text widget and scrollbar
        help_text_widget.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # Add a Close button at the bottom of the window
        close_button = ttk.Button(help_window, text="Close", command=help_window.destroy)
        close_button.pack(pady=5)

        self.update_status("Opened Regex Help window.")

    def analyze_selected_patterns(self):
        """Applies selected regex patterns (using their names) to each file's extracted text.
        Highlights full matches in yellow and capture groups in red.
        Displays a message with the count of full matches and capture groups."""
        self.clear_highlights()

        # Get indices of selected patterns from the listbox.
        selected_indices = self.pattern_listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("Warning", "No regex patterns selected.")
            return

        # Retrieve the regex dictionaries corresponding to the selected indices.
        selected_patterns = [self.saved_patterns[i] for i in selected_indices]

        # Clear previous match results.
        self.match_results = []
        total_match_count = 0
        total_capture_group_count = 0

        # Get the full text from the text area (used for calculating absolute positions for highlighting).
        full_text = self.extracted_text_area.get("1.0", tk.END)

        # Iterate over each file's extracted text.
        for file_entry in self.file_text_mapping:
            filename = file_entry["Filename"]
            extracted_text = file_entry["Extracted Text"]

            # Find the starting index of this file's text in the overall text widget.
            file_start_idx = full_text.find(extracted_text)
            if file_start_idx == -1:
                continue  # Skip if not found (unlikely)

            # Process each selected regex pattern.
            for regex_dict in selected_patterns:
                regex_name = regex_dict["name"]
                regex_pattern = regex_dict["pattern"]

                try:
                    # Use re.MULTILINE and re.DOTALL to allow patterns to match across multiple lines.
                    flags = re.MULTILINE | re.DOTALL
                    print(f"Applying regex '{regex_pattern}' for pattern '{regex_name}' on file '{filename}'")
                    for match in re.finditer(regex_pattern, extracted_text, flags):
                        total_match_count += 1
                        full_match_text = match.group(0)

                        # Collect capture groups (if any).
                        capture_groups = []
                        if match.groups():
                            for i in range(1, len(match.groups()) + 1):
                                capture_text = match.group(i)
                                capture_groups.append(capture_text)
                            total_capture_group_count += len(match.groups())

                        # Append this match's details to the results.
                        self.match_results.append({
                            "Filename": filename,
                            "Regex": regex_name,
                            "Full Match": full_match_text,
                            "Capture Groups": capture_groups
                        })

                        # Calculate positions in the full text widget and highlight the full match.
                        match_start_idx = file_start_idx + match.start()
                        match_end_idx = file_start_idx + match.end()
                        self.highlight_text(match_start_idx, match_end_idx, "highlight_match")

                        # Highlight each capture group.
                        for i in range(1, len(match.groups()) + 1):
                            group_start_idx = file_start_idx + match.start(i)
                            group_end_idx = file_start_idx + match.end(i)
                            if group_start_idx != -1 and group_end_idx != -1:
                                self.highlight_text(group_start_idx, group_end_idx, "highlight_group")
                except re.error as e:
                    messagebox.showerror("Regex Error", f"Invalid pattern '{regex_pattern}' for '{regex_name}': {e}")

        # Configure the highlighting tags.
        self.extracted_text_area.tag_config("highlight_match", background="yellow", foreground="black")
        self.extracted_text_area.tag_config("highlight_group", background="red", foreground="white")

        messagebox.showinfo("Analysis Complete", 
                            f"Found {total_match_count} full matches with {total_capture_group_count} capture groups.")
        self.update_status("Files analyzed with regex formulas.")

    def highlight_text(self, start, end, tag):
        """Highlights a specific range of text in the text area."""
        if start != -1 and end != -1:
            start_idx = f"1.0 + {start} chars"
            end_idx = f"1.0 + {end} chars"
            self.extracted_text_area.tag_add(tag, start_idx, end_idx)

    def clear_highlights(self):
        """Clears all regex highlights."""
        self.extracted_text_area.tag_remove("highlight_match", "1.0", tk.END)
        self.extracted_text_area.tag_remove("highlight_group", "1.0", tk.END)

    def save_regex_pattern(self):
        """Saves the entered regex pattern with its name to storage and updates the listbox."""
        name = self.regex_name_entry.get().strip()
        pattern = self.regex_entry.get().strip()

        if not name or not pattern:
            messagebox.showwarning("Warning", "Both a regex name and pattern must be entered.")
            return

        # Check if a pattern with this name already exists
        for saved in self.saved_patterns:
            if saved["name"] == name:
                messagebox.showinfo("Info", "A pattern with that name already exists.")
                return

        # Create a new dictionary entry for the regex
        new_entry = {"name": name, "pattern": pattern}
        self.saved_patterns.append(new_entry)

        try:
            # Save to JSON file
            with open("saved_patterns.json", "w") as file:
                json.dump(self.saved_patterns, file, indent=4)

            messagebox.showinfo("Success", f"Pattern saved: {name}")

            # Update listbox dynamically with the new entry
            self.pattern_listbox.insert(tk.END, f"{name}: {pattern}")
        except Exception as e:
            messagebox.showerror("Error", f"Failed to save pattern: {e}")

    def load_saved_patterns(self):
        """Loads saved regex patterns from a JSON file."""
        if not os.path.exists("saved_patterns.json"):
            return []  # No saved patterns yet

        try:
            data = json.load(open("saved_patterns.json", "r"))
            # If the first element is a string, convert the list into the new dictionary format.
            if data and isinstance(data[0], str):
                data = [{"name": pattern, "pattern": pattern} for pattern in data]
            return data
        except json.JSONDecodeError:
            return []  # Return empty if file is corrupted

    def delete_selected_pattern(self):
        """Deletes selected regex patterns from storage and the listbox."""
        selected_indices = self.pattern_listbox.curselection()
        if not selected_indices:
            messagebox.showwarning("Warning", "No pattern selected.")
            return

        # Build a list of names to remove from the saved patterns.
        patterns_to_remove = []
        for i in selected_indices:
            display_text = self.pattern_listbox.get(i)
            # The display text is formatted as "name: pattern"
            try:
                name, _ = display_text.split(": ", 1)
                patterns_to_remove.append(name)
            except ValueError:
                # In case the string isn't formatted as expected
                continue

        # Filter out patterns with those names
        self.saved_patterns = [entry for entry in self.saved_patterns if entry["name"] not in patterns_to_remove]

        try:
            # Update JSON file
            with open("saved_patterns.json", "w") as file:
                json.dump(self.saved_patterns, file, indent=4)

            messagebox.showinfo("Success", f"Deleted {len(patterns_to_remove)} pattern(s).")

            # Remove patterns from listbox dynamically
            for index in reversed(selected_indices):
                self.pattern_listbox.delete(index)

        except Exception as e:
            messagebox.showerror("Error", f"Failed to delete pattern: {e}")


    def export_results_to_csv(self):
        """Exports regex match results to CSV.
        
        The output table will have:
        - One row per file (with a "Filename" column).
        - One column per unique regex pattern (using its friendly name).
        - Each cell contains only the aggregated capture groups (if any) for that regex in that file,
            with extra whitespace removed.
        """
        if not self.match_results:
            messagebox.showwarning("Warning", "No match results to export.")
            return

        # Build a nested dictionary mapping each filename to its regex results.
        # Structure: { filename: { regex_name: [capture_str, capture_str, ...], ... }, ... }
        results_by_file = {}
        for entry in self.match_results:
            filename = entry["Filename"]
            regex_name = entry["Regex"]
            capture_groups = entry["Capture Groups"]

            # Remove extra whitespace from each capture group using re.sub.
            filtered_groups = (
                [re.sub(r'\s+', '', grp) for grp in capture_groups if grp is not None]
                if capture_groups
                else []
            )
            result_str = ", ".join(filtered_groups) if filtered_groups else ""

            if filename not in results_by_file:
                results_by_file[filename] = {}
            # Append the result string for this regex; if multiple matches occur, accumulate them.
            results_by_file[filename].setdefault(regex_name, []).append(result_str)

        # Determine the complete set of regex names (columns).
        all_regex_names = set()
        for regex_dict in results_by_file.values():
            all_regex_names.update(regex_dict.keys())
        all_regex_names = sorted(list(all_regex_names))  # Sorted for consistency

        # Build the list of dictionaries for the DataFrame.
        data_rows = []
        for filename, regex_dict in results_by_file.items():
            row = {"Filename": filename}
            for regex_name in all_regex_names:
                # Join multiple results with a newline; if no result for this regex, use an empty string.
                row[regex_name] = "\n".join(filter(None, regex_dict.get(regex_name, [])))
            data_rows.append(row)

        # Create the DataFrame.
        df = pd.DataFrame(data_rows)

        # Ask the user for a save location.
        file_path = filedialog.asksaveasfilename(
            defaultextension=".csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        if file_path:
            if not file_path.lower().endswith(".csv"):
                file_path += ".csv"
            try:
                df.to_csv(file_path, index=False)
                messagebox.showinfo("Success", f"Results exported to {file_path}")
                self.update_status("Data exported to CSV")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to export: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PDFParserApp(root)
    root.mainloop()
